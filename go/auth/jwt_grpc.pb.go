// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: auth/jwt.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthJWT_Sign_FullMethodName = "/auth.AuthJWT/Sign"
)

// AuthJWTClient is the client API for AuthJWT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthJWTClient interface {
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error)
}

type authJWTClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthJWTClient(cc grpc.ClientConnInterface) AuthJWTClient {
	return &authJWTClient{cc}
}

func (c *authJWTClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, AuthJWT_Sign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthJWTServer is the server API for AuthJWT service.
// All implementations must embed UnimplementedAuthJWTServer
// for forward compatibility
type AuthJWTServer interface {
	Sign(context.Context, *SignRequest) (*SignResponse, error)
	mustEmbedUnimplementedAuthJWTServer()
}

// UnimplementedAuthJWTServer must be embedded to have forward compatible implementations.
type UnimplementedAuthJWTServer struct {
}

func (UnimplementedAuthJWTServer) Sign(context.Context, *SignRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedAuthJWTServer) mustEmbedUnimplementedAuthJWTServer() {}

// UnsafeAuthJWTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthJWTServer will
// result in compilation errors.
type UnsafeAuthJWTServer interface {
	mustEmbedUnimplementedAuthJWTServer()
}

func RegisterAuthJWTServer(s grpc.ServiceRegistrar, srv AuthJWTServer) {
	s.RegisterService(&AuthJWT_ServiceDesc, srv)
}

func _AuthJWT_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthJWTServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthJWT_Sign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthJWTServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthJWT_ServiceDesc is the grpc.ServiceDesc for AuthJWT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthJWT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthJWT",
	HandlerType: (*AuthJWTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _AuthJWT_Sign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/jwt.proto",
}
