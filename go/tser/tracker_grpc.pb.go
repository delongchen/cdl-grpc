// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: tser/tracker.proto

package tser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TserTracker_Register_FullMethodName = "/tser.TserTracker/Register"
	TserTracker_GetPeer_FullMethodName  = "/tser.TserTracker/GetPeer"
)

// TserTrackerClient is the client API for TserTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TserTrackerClient interface {
	Register(ctx context.Context, in *ClientRegisterRequest, opts ...grpc.CallOption) (*ClientRegisterResponse, error)
	GetPeer(ctx context.Context, in *GetPeerRequest, opts ...grpc.CallOption) (*GetPeerResponse, error)
}

type tserTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewTserTrackerClient(cc grpc.ClientConnInterface) TserTrackerClient {
	return &tserTrackerClient{cc}
}

func (c *tserTrackerClient) Register(ctx context.Context, in *ClientRegisterRequest, opts ...grpc.CallOption) (*ClientRegisterResponse, error) {
	out := new(ClientRegisterResponse)
	err := c.cc.Invoke(ctx, TserTracker_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tserTrackerClient) GetPeer(ctx context.Context, in *GetPeerRequest, opts ...grpc.CallOption) (*GetPeerResponse, error) {
	out := new(GetPeerResponse)
	err := c.cc.Invoke(ctx, TserTracker_GetPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TserTrackerServer is the server API for TserTracker service.
// All implementations must embed UnimplementedTserTrackerServer
// for forward compatibility
type TserTrackerServer interface {
	Register(context.Context, *ClientRegisterRequest) (*ClientRegisterResponse, error)
	GetPeer(context.Context, *GetPeerRequest) (*GetPeerResponse, error)
	mustEmbedUnimplementedTserTrackerServer()
}

// UnimplementedTserTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedTserTrackerServer struct {
}

func (UnimplementedTserTrackerServer) Register(context.Context, *ClientRegisterRequest) (*ClientRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTserTrackerServer) GetPeer(context.Context, *GetPeerRequest) (*GetPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeer not implemented")
}
func (UnimplementedTserTrackerServer) mustEmbedUnimplementedTserTrackerServer() {}

// UnsafeTserTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TserTrackerServer will
// result in compilation errors.
type UnsafeTserTrackerServer interface {
	mustEmbedUnimplementedTserTrackerServer()
}

func RegisterTserTrackerServer(s grpc.ServiceRegistrar, srv TserTrackerServer) {
	s.RegisterService(&TserTracker_ServiceDesc, srv)
}

func _TserTracker_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TserTrackerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TserTracker_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TserTrackerServer).Register(ctx, req.(*ClientRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TserTracker_GetPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TserTrackerServer).GetPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TserTracker_GetPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TserTrackerServer).GetPeer(ctx, req.(*GetPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TserTracker_ServiceDesc is the grpc.ServiceDesc for TserTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TserTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tser.TserTracker",
	HandlerType: (*TserTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _TserTracker_Register_Handler,
		},
		{
			MethodName: "GetPeer",
			Handler:    _TserTracker_GetPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tser/tracker.proto",
}
